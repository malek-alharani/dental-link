StudentController:

@RestController
@RequestMapping(Array("/students"))
class StudentController @Autowired()(val studentService: StudentService) {

  @GetMapping(Array("/"))
  def getAllStudents: ResponseEntity[String] = {
    val students = studentService.getAllStudents
    ResponseEntity.ok(Json.toJson(students).toString())
  }

  @GetMapping(Array("/{id}"))
  def getStudentById(@PathVariable id: Long): ResponseEntity[String] = {
    studentService.getStudentById(id) match {
      case Some(student) => ResponseEntity.ok(Json.toJson(student).toString())
      case None => ResponseEntity.notFound().build()
    }
  }

  @PostMapping(Array("/"))
  def createStudent(@RequestBody studentDto: StudentDto): ResponseEntity[String] = {
    val createdStudent = studentService.createStudent(studentDto)
    ResponseEntity.ok(Json.toJson(createdStudent).toString())
  }

  @PutMapping(Array("/{id}"))
  def updateStudent(@PathVariable id: Long, @RequestBody updatedStudentDto: StudentDto): ResponseEntity[String] = {
    studentService.updateStudent(id, updatedStudentDto) match {
      case Some(student) => ResponseEntity.ok(Json.toJson(student).toString())
      case None => ResponseEntity.notFound().build()
    }
  }

  @DeleteMapping(Array("/{id}"))
  def deleteStudent(@PathVariable id: Long): ResponseEntity[Void] = {
    studentService.deleteStudent(id)
    ResponseEntity.noContent().build()
  }
}




UserController:

package com.strawary.dental_link.controller

import com.strawary.dental_link.dto.UserDto
import com.strawary.dental_link.service.UserService
import org.springframework.web.bind.annotation._
import org.springframework.http.ResponseEntity
import org.springframework.beans.factory.annotation.Autowired
import play.api.libs.json.Json

@RestController
@RequestMapping(Array("/users"))
class UserController @Autowired()(val userService: UserService) {

  @GetMapping(Array("/"))
  def getAllUsers(): ResponseEntity[String] = {
    val users = userService.getAllUsers
    ResponseEntity.ok(Json.toJson(users).toString())
  }

  @GetMapping(Array("/{id}"))
  def getUserById(@PathVariable id: Long): ResponseEntity[String] = {
    userService.getUserById(id) match {
      case Some(user) => ResponseEntity.ok(Json.toJson(user).toString())
      case None => ResponseEntity.notFound().build()
    }
  }

  @PostMapping(Array("/"))
  def createUser(@RequestBody userDto: UserDto): ResponseEntity[String] = {
    val createdUser = userService.createUser(userDto)
    ResponseEntity.ok(Json.toJson(createdUser).toString())
  }

  @PutMapping(Array("/{id}"))
  def updateUser(@PathVariable id: Long, @RequestBody updatedUserDto: UserDto): ResponseEntity[String] = {
    userService.updateUser(id, updatedUserDto) match {
      case Some(user) => ResponseEntity.ok(Json.toJson(user).toString())
      case None => ResponseEntity.notFound().build()
    }
  }

  @DeleteMapping(Array("/{id}"))
  def deleteUser(@PathVariable id: Long): ResponseEntity[Void] = {
    userService.deleteUser(id)
    ResponseEntity.noContent().build()
  }
}




----------------------------------------------------------------------------
dtos:
----------------------------------------------------------------------------
UserDto:

package com.strawary.dental_link.dto

import play.api.libs.json.{Format, Json}

object UserDto {
  implicit val userFormat: Format[UserDto] = Json.format[UserDto]
}

case class UserDto(
                    userId: Option[Long],
                    fullName: String,
                    email: Option[String],
                    phoneNumber: String,
                    role: String,
                    profilePicture: Option[String],
                    otpCode: Option[String],
                    otpExpiration: Option[String],
                    isVerified: Boolean
                  )





StudentDto:
package com.strawary.dental_link.dto

import play.api.libs.json.{Format, Json}

object StudentDto {
  implicit val studentFormat: Format[StudentDto] = Json.format[StudentDto]
}

case class StudentDto(
                       userId: Option[Long],
                       fullName: String,
                       email: Option[String],
                       phoneNumber: String,
                       role: String,
                       profilePicture: Option[String],
                       university: String,
                       currentYear: Int,
                       specialization: Option[String],
                       coursesCurrent: List[String],
                       skills: List[String],
                       neededCases: List[String],
                       location: String
                     )


PatientDto:
package com.strawary.dental_link.dto

import play.api.libs.json.{Format, Json}

object PatientDto {
  implicit val patientFormat: Format[PatientDto] = Json.format[PatientDto]
}

case class PatientDto(
                       userId: Option[Long],
                       fullName: String,
                       email: Option[String],
                       phoneNumber: String,
                       role: String,
                       profilePicture: Option[String],
                       age: Int,
                       gender: String,
                       location: String,
                       chronicConditions: List[String],
                       specialNeeds: List[String],
                       medicalReports: Option[String]
                     )



----------------------------------------------------------------------------------
Models/entities
----------------------------------------------------------------------------------
User:
package com.strawary.dental_link.model

import com.strawary.dental_link.model.Role.{PATIENT, STUDENT}
import jakarta.persistence.{AttributeConverter, Column, Convert, Converter, Entity, EnumType, Enumerated, GeneratedValue, GenerationType, Id, Inheritance, InheritanceType}

import java.time.LocalDateTime


@Entity
@Inheritance(strategy = InheritanceType.JOINED)
class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  var userId: Long = _

  @Column(nullable = false)
  var fullName: String = _

  @Column(nullable = true)
  var email: String = _

  @Column(nullable = false, unique = true)
  var phoneNumber: String = _

  @Enumerated(EnumType.STRING)
  var role: Role = _

  @Column(nullable = true)
  var profilePicture: String = _

  @Column(nullable = true)
  var otpCode: String = _ // Ensure this field exists in your entity

  @Column(nullable = true)
  var otpExpiration: LocalDateTime = _ // Ensure this field exists

  @Column(nullable = false)
  var isVerified: Boolean = false
}

sealed trait Role

object Role {
  case object STUDENT extends Role
  case object PATIENT extends Role

  // Add a method to convert a string to the corresponding Role
  def fromString(role: String): Role = role match {
    case "STUDENT" => STUDENT
    case "PATIENT" => PATIENT
    case _ => throw new IllegalArgumentException(s"Unknown role: $role")
  }

  // Optionally, add a method to convert Role to a string
  def toString(role: Role): String = role match {
    case STUDENT => "STUDENT"
    case PATIENT => "PATIENT"
  }
}


@Converter(autoApply = true)
class RoleConverter extends AttributeConverter[Role, String] {

  override def convertToDatabaseColumn(role: Role): String = role match {
    case Role.STUDENT => "STUDENT"
    case Role.PATIENT => "PATIENT"
  }

  override def convertToEntityAttribute(roleString: String): Role = roleString match {
    case "STUDENT" => Role.STUDENT
    case "PATIENT" => Role.PATIENT
    case _ => throw new IllegalArgumentException(s"Unknown role: $roleString")
  }
}

Student:
package com.strawary.dental_link.model

import jakarta.persistence._
import java.util.List

@Entity
class Student extends User {
  @Column(nullable = false)
  var university: String = _

  @Column(nullable = false)
  var currentYear: Int = _

  @Column(nullable = true)
  var specialization: String = _

  @ElementCollection
  var coursesCurrent: List[String] = _

  @ElementCollection
  var skills: List[String] = _

  @ElementCollection
  var neededCases: List[String] = _

  @Column(nullable = false)
  var location: String = _
}


Patient:
package com.strawary.dental_link.model

import jakarta.persistence._
import java.util.List

@Entity
class Patient extends User {
  @Column(nullable = false)
  var age: Int = _

  @Column(nullable = false)
  var gender: String = _

  @Column(nullable = false)
  var location: String = _

  @ElementCollection
  var chronicConditions: List[String] = _

  @ElementCollection
  var specialNeeds: List[String] = _

  @ElementCollection
  var medicalReports: List[String] = _
}



DentalCase:
package com.strawary.dental_link.model

import com.strawary.dental_link.model.CaseType.{CROWN, FILLING, GUM_TREATMENT, ROOT_CANAL}
import jakarta.persistence._

import java.time.LocalDateTime

@Entity
@Table(name = "dental_case") // Rename the table to avoid conflict with 'case'
class DentalCase {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  var caseId: Long = _

  @Column(nullable = false)
  var caseType: CaseType = _

  @Column(nullable = true)
  var description: String = _

  @ManyToOne
  @JoinColumn(name = "patient_id", nullable = false)
  var patient: Patient = _

  @Column(nullable = false)
  var createdAt: LocalDateTime = LocalDateTime.now()

  @Column(nullable = false)
  var updatedAt: LocalDateTime = LocalDateTime.now()
}

sealed trait CaseType
object CaseType {
  case object ROOT_CANAL extends CaseType
  case object FILLING extends CaseType
  case object CROWN extends CaseType
  case object GUM_TREATMENT extends CaseType

  def fromString(caseType: String): CaseType = caseType match {
    case "ROOT_CANAL" => ROOT_CANAL
    case "FILLING" => FILLING
    case "CROWN" => CROWN
    case "GUM_TREATMENT" => GUM_TREATMENT
    case _ => throw new IllegalArgumentException(s"Unknown case type: $caseType")
  }

  def toString(caseType: CaseType): String = caseType match {
    case ROOT_CANAL => "ROOT_CANAL"
    case FILLING => "FILLING"
    case CROWN => "CROWN"
    case GUM_TREATMENT => "GUM_TREATMENT"
  }
}


@Converter(autoApply = true)
class CaseTypeConverter extends AttributeConverter[CaseType, String] {



  // Convert CaseType to a String to store in the database
  override def convertToDatabaseColumn(caseType: CaseType): String = caseType match {
    case CaseType.ROOT_CANAL => "ROOT_CANAL"
    case CaseType.FILLING => "FILLING"
    case CaseType.CROWN => "CROWN"
    case CaseType.GUM_TREATMENT => "GUM_TREATMENT"
    case _ => throw new IllegalArgumentException(s"Unknown case type: $caseType")
  }

  // Convert String from the database back to the CaseType
  override def convertToEntityAttribute(caseTypeString: String): CaseType = caseTypeString match {
    case "ROOT_CANAL" => CaseType.ROOT_CANAL
    case "FILLING" => CaseType.FILLING
    case "CROWN" => CaseType.CROWN
    case "GUM_TREATMENT" => CaseType.GUM_TREATMENT
    case _ => throw new IllegalArgumentException(s"Unknown case type string: $caseTypeString")
  }
}

TreatmentRequest:

package com.strawary.dental_link.model

import com.strawary.dental_link.model.Status.{APPROVED, COMPLETED, PENDING, REJECTED}
import jakarta.persistence._

import java.time.LocalDateTime

@Entity
class TreatmentRequest {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  var requestId: Long = _

  @ManyToOne
  @JoinColumn(name = "case_id", nullable = false)
  var dentalCase: DentalCase = _

  @ManyToOne
  @JoinColumn(name = "student_id", nullable = false)
  var student: Student = _

  @Convert(converter = classOf[StatusConverter])
  var status: Status = _

  @Column(nullable = true)
  var appointmentDate: LocalDateTime = _

  @Column(nullable = false)
  var createdAt: LocalDateTime = LocalDateTime.now()

  @Column(nullable = false)
  var updatedAt: LocalDateTime = LocalDateTime.now()
}

sealed trait Status

object Status {
  case object PENDING extends Status

  case object APPROVED extends Status

  case object COMPLETED extends Status

  case object REJECTED extends Status

  def fromString(status: String): Status = status match {
    case "PENDING" => PENDING
    case "APPROVED" => APPROVED
    case "COMPLETED" => COMPLETED
    case "REJECTED" => REJECTED
    case _ => throw new IllegalArgumentException(s"Unknown status: $status")
  }

  def toString(status: Status): String = status match {
    case PENDING => "PENDING"
    case APPROVED => "APPROVED"
    case COMPLETED => "COMPLETED"
    case REJECTED => "REJECTED"
  }
}

@Converter(autoApply = true)
class StatusConverter extends AttributeConverter[Status, String] {
  // Convert Status to a String to store in the database
  override def convertToDatabaseColumn(status: Status): String = status match {
    case Status.PENDING => "PENDING"
    case Status.APPROVED => "APPROVED"
    case Status.COMPLETED => "COMPLETED"
    case Status.REJECTED => "REJECTED"
    case _ => throw new IllegalArgumentException(s"Unknown status: $status")
  }

  // Convert String from the database back to the Status
  override def convertToEntityAttribute(statusString: String): Status = statusString match {
    case "PENDING" => Status.PENDING
    case "APPROVED" => Status.APPROVED
    case "COMPLETED" => Status.COMPLETED
    case "REJECTED" => Status.REJECTED
    case _ => throw new IllegalArgumentException(s"Unknown status string: $statusString")
  }
}


-------------------------------------------------------------------------------------
Services
-------------------------------------------------------------------------------------
UserService:

package com.strawary.dental_link.service
import com.strawary.dental_link.dto.UserDto
import com.strawary.dental_link.model.{Role, User}
import com.strawary.dental_link.repository.UserRepository
import org.springframework.stereotype.Service
import org.springframework.beans.factory.annotation.Autowired

import scala.jdk.CollectionConverters._
import scala.jdk.OptionConverters._


@Service
class UserService @Autowired()(val userRepository: UserRepository) {

  private def mapToUserDto(user: User): UserDto = {
    UserDto(
      userId = Some(user.userId),
      fullName = user.fullName,
      email = Option(user.email),
      phoneNumber = user.phoneNumber,
      role = Role.toString(user.role), // Use Role.toString here
      profilePicture = Option(user.profilePicture),
      otpCode = Option(user.otpCode),
      otpExpiration = Option(user.otpExpiration).map(_.toString),
      isVerified = user.isVerified
    )
  }

  private def mapToUserEntity(userDto: UserDto): User = {
    val user = new User
    user.fullName = userDto.fullName
    user.email = userDto.email.orNull
    user.phoneNumber = userDto.phoneNumber
    user.role = Role.fromString(userDto.role) // Use Role.fromString here
    user.profilePicture = userDto.profilePicture.orNull
    user.otpCode = userDto.otpCode.orNull
    user.otpExpiration = userDto.otpExpiration.map(java.time.LocalDateTime.parse).orNull
    user.isVerified = userDto.isVerified
    user
  }

  def getAllUsers: List[UserDto] = {
    userRepository.findAll().asScala.toList.map(mapToUserDto)
  }

  def getUserById(id: Long): Option[UserDto] = {
    userRepository.findById(id).toScala.map(mapToUserDto)
  }

  def createUser(userDto: UserDto): UserDto = {
    val user = mapToUserEntity(userDto)
    val savedUser = userRepository.save(user)
    mapToUserDto(savedUser)
  }

  def updateUser(id: Long, updatedUserDto: UserDto): Option[UserDto] = {
    userRepository.findById(id).toScala.map { user =>
      user.fullName = updatedUserDto.fullName
      user.email = updatedUserDto.email.orNull
      user.phoneNumber = updatedUserDto.phoneNumber
      user.role = Role.fromString(updatedUserDto.role) // Use Role.fromString here
      user.profilePicture = updatedUserDto.profilePicture.orNull
      user.otpCode = updatedUserDto.otpCode.orNull
      user.otpExpiration = updatedUserDto.otpExpiration.map(java.time.LocalDateTime.parse).orNull
      user.isVerified = updatedUserDto.isVerified
      val savedUser = userRepository.save(user)
      mapToUserDto(savedUser)
    }
  }

  def deleteUser(id: Long): Unit = {
    userRepository.deleteById(id)
  }
}

--------------------
StudentService:
package com.strawary.dental_link.service

import com.strawary.dental_link.model.Student
import com.strawary.dental_link.repository.StudentRepository
import org.springframework.stereotype.Service
import org.springframework.beans.factory.annotation.Autowired

import java.util.Optional
import scala.jdk.CollectionConverters.CollectionHasAsScala
import scala.jdk.OptionConverters.RichOptional

@Service
class StudentService @Autowired()(val studentRepository: StudentRepository) {

  def getAllStudents: List[Student] = {
    studentRepository.findAll().asScala.toList
  }

  def getStudentById(id: Long): Option[Student] = {
    studentRepository.findById(id).toScala
  }

  def createStudent(student: Student): Student = {
    studentRepository.save(student)
  }

  def updateStudent(id: Long, updatedStudent: Student): Option[Student] = {
    val studentOpt = studentRepository.findById(id)
    studentOpt.map(student => {
      student.university = updatedStudent.university
      student.currentYear = updatedStudent.currentYear
      studentRepository.save(student)
    }).toScala
  }

  def deleteStudent(id: Long): Unit = {
    studentRepository.deleteById(id)
  }
}


---------------
PatientService:
package com.strawary.dental_link.service

import com.strawary.dental_link.model.Patient
import com.strawary.dental_link.repository.PatientRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import scala.jdk.CollectionConverters.CollectionHasAsScala
import scala.jdk.OptionConverters.RichOptional

@Service
class PatientService @Autowired()(val patientRepository: PatientRepository) {

  def getAllPatients: List[Patient] = {
    patientRepository.findAll().asScala.toList
  }

  def getPatientById(id: Long): Option[Patient] = {
    patientRepository.findById(id).toScala
  }

  def createPatient(patient: Patient): Patient = {
    patientRepository.save(patient)
  }

  def updatePatient(id: Long, updatedPatient: Patient): Option[Patient] = {
    val patientOpt = patientRepository.findById(id)
    patientOpt.map(patient => {
      patient.age = updatedPatient.age
      patient.location = updatedPatient.location
      patientRepository.save(patient)
    }).toScala
  }

  def deletePatient(id: Long): Unit = {
    patientRepository.deleteById(id)
  }
}


---------------
DentalCaseService:
package com.strawary.dental_link.service

import com.strawary.dental_link.dto.DentalCaseDto
import com.strawary.dental_link.model.{CaseType, DentalCase}
import com.strawary.dental_link.repository.DentalCaseRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import scala.jdk.CollectionConverters.CollectionHasAsScala
import scala.jdk.OptionConverters.RichOptional

@Service
class DentalCaseService @Autowired()(val dentalCaseRepository: DentalCaseRepository) {

  private def mapToDentalCaseDto(dentalCase: DentalCase): DentalCaseDto = {
    DentalCaseDto(
      caseId = Some(dentalCase.caseId),
      caseType = CaseType.toString(dentalCase.caseType), // Use CaseType.toString here
      description = Option(dentalCase.description),
      symptoms = dentalCase.symptoms,
      createdAt = Option(dentalCase.createdAt).map(_.toString),
      updatedAt = Option(dentalCase.updatedAt).map(_.toString),
      patientId = dentalCase.patient.userId
    )
  }

  private def mapToDentalCaseEntity(dentalCaseDto: DentalCaseDto): DentalCase = {
    val dentalCase = new DentalCase
    dentalCase.caseType = CaseType.fromString(dentalCaseDto.caseType) // Use CaseType.fromString here
    dentalCase.description = dentalCaseDto.description.orNull
    dentalCase.symptoms = dentalCaseDto.symptoms
    dentalCase.createdAt = dentalCaseDto.createdAt.map(java.time.LocalDateTime.parse).orNull
    dentalCase.updatedAt = dentalCaseDto.updatedAt.map(java.time.LocalDateTime.parse).orNull
    dentalCase
  }

  def getAllDentalCases: List[DentalCaseDto] = {
    dentalCaseRepository.findAll().asScala.toList.map(mapToDentalCaseDto)
  }

  def getDentalCaseById(id: Long): Option[DentalCaseDto] = {
    dentalCaseRepository.findById(id).toScala.map(mapToDentalCaseDto)
  }

  def createDentalCase(dentalCaseDto: DentalCaseDto): DentalCaseDto = {
    val dentalCase = mapToDentalCaseEntity(dentalCaseDto)
    val savedDentalCase = dentalCaseRepository.save(dentalCase)
    mapToDentalCaseDto(savedDentalCase)
  }

  def updateDentalCase(id: Long, updatedDentalCaseDto: DentalCaseDto): Option[DentalCaseDto] = {
    dentalCaseRepository.findById(id).toScala.map { dentalCase =>
      dentalCase.caseType = CaseType.fromString(updatedDentalCaseDto.caseType) // Use CaseType.fromString here
      dentalCase.description = updatedDentalCaseDto.description.orNull
      dentalCase.symptoms = updatedDentalCaseDto.symptoms
      dentalCase.createdAt = updatedDentalCaseDto.createdAt.map(java.time.LocalDateTime.parse).orNull
      dentalCase.updatedAt = updatedDentalCaseDto.updatedAt.map(java.time.LocalDateTime.parse).orNull
      val savedDentalCase = dentalCaseRepository.save(dentalCase)
      mapToDentalCaseDto(savedDentalCase)
    }
  }

  def deleteDentalCase(id: Long): Unit = {
    dentalCaseRepository.deleteById(id)
  }
}


----------------------
TreatmentRequestService:
package com.strawary.dental_link.service

import com.strawary.dental_link.dto.TreatmentRequestDto
import com.strawary.dental_link.model.{Status, TreatmentRequest}
import com.strawary.dental_link.repository.TreatmentRequestRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import scala.jdk.CollectionConverters.CollectionHasAsScala
import scala.jdk.OptionConverters.RichOptional

@Service
class TreatmentRequestService @Autowired()(val treatmentRequestRepository: TreatmentRequestRepository) {

  private def mapToTreatmentRequestDto(request: TreatmentRequest): TreatmentRequestDto = {
    TreatmentRequestDto(
      requestId = Some(request.requestId),
      caseId = request.dentalCase.caseId,
      studentId = request.student.userId,
      status = Status.toString(request.status), // Use Status.toString here
      appointmentDate = Option(request.appointmentDate).map(_.toString),
      createdAt = Option(request.createdAt).map(_.toString),
      updatedAt = Option(request.updatedAt).map(_.toString)
    )
  }

  private def mapToTreatmentRequestEntity(treatmentRequestDto: TreatmentRequestDto): TreatmentRequest = {
    val request = new TreatmentRequest
    request.status = Status.fromString(treatmentRequestDto.status) // Use Status.fromString here
    request.appointmentDate = treatmentRequestDto.appointmentDate.map(java.time.LocalDateTime.parse).orNull
    request
  }

  def getAllTreatmentRequests: List[TreatmentRequestDto] = {
    treatmentRequestRepository.findAll().asScala.toList.map(mapToTreatmentRequestDto)
  }

  def getTreatmentRequestById(id: Long): Option[TreatmentRequestDto] = {
    treatmentRequestRepository.findById(id).toScala.map(mapToTreatmentRequestDto)
  }

  def createTreatmentRequest(treatmentRequestDto: TreatmentRequestDto): TreatmentRequestDto = {
    val request = mapToTreatmentRequestEntity(treatmentRequestDto)
    val savedRequest = treatmentRequestRepository.save(request)
    mapToTreatmentRequestDto(savedRequest)
  }

  def updateTreatmentRequest(id: Long, updatedRequestDto: TreatmentRequestDto): Option[TreatmentRequestDto] = {
    treatmentRequestRepository.findById(id).toScala.map { request =>
      request.status = Status.fromString(updatedRequestDto.status) // Use Status.fromString here
      request.appointmentDate = updatedRequestDto.appointmentDate.map(java.time.LocalDateTime.parse).orNull
      val savedRequest = treatmentRequestRepository.save(request)
      mapToTreatmentRequestDto(savedRequest)
    }
  }

  def deleteTreatmentRequest(id: Long): Unit = {
    treatmentRequestRepository.deleteById(id)
  }
}


------------------------------------------------------------------
repositories:
------------------------------------------------------------------

DentalCaseRepository:
package com.strawary.dental_link.repository

import com.strawary.dental_link.model.{DentalCase, Patient}
import org.springframework.data.jpa.repository.JpaRepository

trait DentalCaseRepository extends JpaRepository[DentalCase, Long] {
  def findByPatient(patient: Patient): List[DentalCase]
}


-----------------
PatientRepository:
package com.strawary.dental_link.repository

import com.strawary.dental_link.model.Patient
import org.springframework.data.jpa.repository.JpaRepository

trait PatientRepository extends JpaRepository[Patient, Long] {
  def findByLocation(location: String): List[Patient]
}

-----------------------
StudentRepository:
package com.strawary.dental_link.repository

import com.strawary.dental_link.model.Student
import org.springframework.data.jpa.repository.JpaRepository

trait StudentRepository extends JpaRepository[Student, Long] {
  def findByUniversity(university: String): List[Student]
}

------------------------
UserRepository:
package com.strawary.dental_link.repository

import com.strawary.dental_link.model.User
import org.springframework.data.jpa.repository.JpaRepository

trait UserRepository extends JpaRepository[User, Long] {
  def findByPhoneNumber(phoneNumber: String): Option[User]
}

----------------------
TreatmentRequestRepository:
package com.strawary.dental_link.repository

import com.strawary.dental_link.model.{Status, Student, TreatmentRequest}
import org.springframework.data.jpa.repository.JpaRepository

trait TreatmentRequestRepository extends JpaRepository[TreatmentRequest, Long] {
  def findByStudent(student: Student): List[TreatmentRequest]
  def findByStatus(status: Status): List[TreatmentRequest]
}






